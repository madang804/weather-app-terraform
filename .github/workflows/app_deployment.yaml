name: Flask App Deployment
on:
  workflow_dispatch:
    # push:
    #   branches:
    #     - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Load and cache dependencies
        id: lint
        uses: ./.github/actions/cached-deps
        with:
          cache-dependencies: 'false'
          
      - name: Run linter
        run: flake8 .

      - name: Output cache confirmation
        run: |
          if [[ "${{ steps.lint.outputs.cache-confirmation }}" != 'false' ]]; then
            echo "Cache: True"
          else
            echo "Cache: False"
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Load and cache dependencies
        id: test
        uses: ./.github/actions/cached-deps
        with:
          cache-dependencies: 'true'

      - name: Run Unit Test
        id: unit-test
        #run: ${{ env.pythonLocation }}/bin/python -m pytest tests/ -v
        run: python3 -m pytest tests/ -v

      - name: Run Smoke Test
        run: |
          # Start server
          gunicorn --bind 0.0.0.0:5000 application:application --access-logfile - &
          GUNICORN_PID=$!

          # Wait for server with retries
          echo "Waiting for server to start..."
          for i in {1..10}; do
            if curl -s -o /dev/null http://127.0.0.1:5000; then
              echo "Server is up!"
              break
            fi
            sleep 3
            echo "Retry $i/10"
          done

          # Verify server is running
          if ! ps -p $GUNICORN_PID > /dev/null; then
            echo "Error: Gunicorn failed to start"
            exit 1
          fi

          # Test homepage
          HTTP_CODE=$(curl -so /dev/null -w "%{http_code}" http://127.0.0.1:5000)
          if [ "$HTTP_CODE" -ne 200 ]; then
            printf "Error: Homepage test failed: Homepage returned $HTTP_CODE\n"
            kill $GUNICORN_PID
            exit 1
          fi
            printf "Homepage test passed: Homepage returned $HTTP_CODE\n"
          
          # Test API endpoint
          test_endpoint() {
            local url="$1"
            local keyword="$2"
            echo "Testing $url"
            response=$(curl -s "$url")
            if ! echo "$response" | grep -q "$keyword"; then
              echo "Error: Missing '$keyword' in response: $response"
              kill $GUNICORN_PID
              exit 1
            fi
            echo "âœ… $url passed"
          }
      
          test_endpoint "http://127.0.0.1:5000/api/v1.0/weather?location=London" '"weather"'
          test_endpoint "http://127.0.0.1:5000/api/v1.0/temperature?location=Manchester" '"temperature"'
          test_endpoint "http://127.0.0.1:5000/api/v1.0/wind?location=Glasgow" '"wind speed"'
          test_endpoint "http://127.0.0.1:5000/api/v1.0/humidity?location=Birmingham" '"humidity"'

          # Clean up
          kill $GUNICORN_PID
          printf "All smoke tests passed\n"

      
