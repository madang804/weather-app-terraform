name: Flask App Deployment
on: workflow_dispatch
  # workflow_dispatch:
    # inputs:
    #   job_to_run:
    #     description: 'Select the job to run'
    #     required: true
    #     default: 'lint'
    #     type: choice
    #     options:
    #       - lint
    #       - pytest-host
    #       - docker-build
    #       - pytest-container
    #       - deploy-web_app
  # push:
  #   branches:
  #     - main

jobs:
  lint:
    # if: ${{ inputs.job_to_run == 'lint' }}
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff

      - name: Run linter
        run: python -m ruff check .

  pytest-host:
    # if: ${{ inputs.job_to_run == 'pytest-host' }}
    strategy:
      matrix:
        OS: ["ubuntu-24.04", "ubuntu-22.04", "macos-15", "macos-14", "macos-13", "windows-2025", "windows-2022"]
        python-version: ["3.13", "3.12", "3.11", "3.10", "3.9"]  
    runs-on: ${{ matrix.OS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
      
      - name: Run Unit Test
        run: python -m pytest tests/ -v
  
  docker-build:
    # if: ${{ inputs.job_to_run == 'docker-build' }}
    runs-on: ubuntu-24.04
    needs: pytest-host
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:v1
  
  pytest-container:
    # if: ${{ inputs.job_to_run == 'pytest-container' }}
    runs-on: ubuntu-24.04
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run tests in Docker container
        run: docker run --rm --mount type=bind,src=${{ github.workspace }},dst=/app ${{ secrets.DOCKER_USERNAME }}/flask-app:v1 python -m pytest tests/ -v

  deploy-web_app:
    # if: ${{ inputs.job_to_run == 'deploy-web_app' }}
    needs: pytest-container
    runs-on: ubuntu-24.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    outputs:
      app_url: $(terraform output -raw app_url)
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Create a zip file for Dockerrun.aws.json
      - name: Create zip file
        run: |
          chmod +x zip-Dockerrun.aws.json.sh
          ./zip-Dockerrun.aws.json.sh
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1
      
      - name: Terraform initialise
        run: terraform init

      - name: Terraform apply
        run: |
          terraform apply -auto-approve
      
  test-web_app_endpoints:
    needs: deploy-web_app
    runs-on: ubuntu-24.04
    env:
      APP_URL: ${{ needs.deploy-web_app.outputs.app_url }}
    steps:
      - name: Test homepage
        run: |
          HTTP_CODE=$(curl -so /dev/null -w "%{http_code}" "${APP_URL}")
          if [ "$HTTP_CODE" -ne 200 ]; then
            printf "Error: Homepage test failed: Homepage returned $HTTP_CODE\n"
            exit 1
          fi
            printf "Homepage test passed: Homepage returned $HTTP_CODE\n"
      
      - name: Test endpoints
        run: |
          test_endpoint() {
            local url="$1"
            local keyword="$2"
            echo "Testing $url"
            response=$(curl -s "$url")
            if ! echo "$response" | grep -q "$keyword"; then
              echo "Error: Missing '$keyword' in response: $response"
              exit 1
            fi
            echo "âœ… $url passed"
          }
      
          test_endpoint "${APP_URL}/api/v1.0/weather?location=London" '"weather"'
          test_endpoint "${APP_URL}/api/v1.0/temperature?location=Manchester" '"temperature"'
          test_endpoint "${APP_URL}/api/v1.0/wind?location=Glasgow" '"wind speed"'
          test_endpoint "${APP_URL}/api/v1.0/humidity?location=Birmingham" '"humidity"'

  clean_up:
    if: always()
    needs: [deploy-web_app, test-web_app_endpoints]
    runs-on: ubuntu-24.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1
      
      - name: Clean up resources
        run: |
          terraform destroy -auto-approve
          echo "Resources cleaned up successfully."
          aws s3 rm "s3://$(aws s3 ls | awk '{print $3}')" --recursive # Delete S3 bucket objects
          aws s3api delete-bucket-policy --bucket "$(aws s3 ls | awk '{print $3}')" # Delete S3 bucket policy
          aws s3api delete-bucket --bucket "$(aws s3 ls | awk '{print $3}')" # Delete S3 bucket
          echo "S3 bucket and its contents deleted successfully."
